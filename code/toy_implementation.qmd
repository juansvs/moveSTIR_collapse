---
title: "building intuition for pmovestir"
author: "Juan Vargas"
format: html
editor: visual
---

The stationary distribution version of probabilistic MoveSTIR is described by the following equation:

$$
E[h_{i\leftarrow j}(x)]=\beta\lambda\left[p_i(x)p_j(x)\frac{1}{\nu}+\sigma[\delta_i(x)]\sigma[\delta_j(x)]\int_0^\infty \rho[\delta_i(x),\delta_j(x)] e^{-\nu s}ds\right]
$$

Briefly, the force of infection experienced by individual $i$ from individual $j$ is proportional to two main terms

1.  The product of the utilization distributions of both individuals. This is, the probabilities of using a given location. We assume this probability is stable through time.
2.  The temporal cross-correlation in use of a given location. This is, the correlations between the presence of each individual at the same cell, integrated across all possible lags. This term accounts for the possibility of using the same areas, but with some lag between visits. Visits that are further apart in time will have a lower influence on the force of infection, given the decay of the parasite in the environment.

The way I've been approaching this has been to

1.  Simulate tracking data
2.  Fit a continuous time movement model to the simulated tracks, and generate the autocorrelated kernel density estimate of the utilization distribution. The generated UDs can be expressed in terms of a probability *mass* or a probability *density.*
3.  Estimate the probability distribution of encounters. This is the product of two utilization distributions, divided by the coefficient of overlap (Scharf et al. 2018).
4.  Calculate the pairwise product of the utilization distributions, and the product of their standard deviations. The standard deviations are calculated as $\sigma_i=\sqrt{\hat p_i(1-\hat p_i)}$, where $\hat p_i$ is the estimated probability of use from the UD. Both products have been at the spatial scale generated by the kernel density estimation process.
5.  Sample random points within the 95% polygon of the contact probability distribution.
6.  Determine the visit history for both individuals inside a square around each random point. The side of the square is two times a threshold distance that determine contact. The visit history is a binary vector that tells whether an individual was inside the square, for all time points.
7.  Determine the cross-correlation between the visit histories at every point, i.e. the correlation for every possible lag. Multiply this cross-correlation values by a corresponding scaling factor equal to $e^{-\nu\tau}$ , where $\nu$ is the decay rate of the parasite in the environment and $\tau$ is the lag.
8.  Add the cross-correlations multiplied by the scaling factors together, and multiply them by the product of standard deviations at that same location.
9.  Add the result to the product of the UDs, and scale them by the epidemiological parameters.

Now, there could be a mismatch between scales. I've been using the grid generated by the akde algorithm to generate the product of the UDs and the standard deviations. The sampling area of the random points, in contrast, is defined by the contact distance, which is related to the epidemiological process. The risk here is that the correlations do not correspond well with the resolution of the grid.

Most terms in the equation are unitless: the probabilities, their standard deviations, the correlations, the scalar in the integral. So how do we determine the right process? To get some intuition, I will generate data in a simpler way, and follow a similar process.

So first let's set a landscape with certain probabilities of use. I will generate a simple 6 by 6 grid, which can then be sampled as a 3 by 3 grid, and compare the results.

```{r true-ud}
ncells <- 6*6
trueprobs <- runif(ncells)
image(matrix(trueprobs/sum(trueprobs), nrow = 6), asp=1,las=1)
```

Then we generate two location histories, where the locations are determined by the probabilities of use.

```{r loc-hists}
nsteps <- 20
pos1 <- sample.int(ncells, size = nsteps, replace = TRUE, prob = trueprobs)
pos2 <- sample.int(ncells, size = nsteps, replace = TRUE, prob = trueprobs)
dethist1 <- dethist2 <- matrix(0, nrow = nsteps, ncol = ncells)
for (i in seq_len(nsteps)) {
  p1 <- pos1[i]
  p2 <- pos2[i]
  dethist1[i,p1] <- 1
  dethist2[i,p2] <- 1
}
par(mfrow=c(1,2))
image(1:nsteps, 1:ncells, dethist1, xlab = "Time", ylab = "Location")
image(1:nsteps, 1:ncells, dethist2, xlab = "Time", ylab = "")
mtext(outer = T, text = "Detection histories",line = -2, cex = 1.4)
```

From the detection histories we can estimate a probability of use as the proportion of times the individuals used a given cell. These estimated probabilities correspond to the probability mass function, i.e. the integral of the probability density function across each cell, and their values sum to 1. The corresponding PDF would be obtained dividing the probabilities by the area of each cell (1 in this case).

```{r}
est_probs1 <- est_probs2 <- rep(0,ncells)
est_probs1[as.numeric(names(table(pos1)))] <- table(pos1)/nsteps
est_probs2[as.numeric(names(table(pos2)))] <- table(pos2)/nsteps
par(mfrow=c(1,3))
image(1:6,1:6,matrix(trueprobs, ncol = 6), asp=1, las = 1, main = "True prob")
image(1:6,1:6,matrix(est_probs1, ncol=6), asp = 1, las = 1, main = "Est prob 1")
image(1:6,1:6,matrix(est_probs2, ncol=6), asp = 1, las = 1, main = "Est prob 2")
```

We then use these estimated probabilities to calculate the product of the utilization distributions, and the product of the standard deviations. The first terms represent the probability of contact in a given cell, based on the individual pattern of space use. The second term accounts for variability in space use.

```{r udprod}
udprod <- est_probs1*est_probs2
sdprod <- sqrt(est_probs1*(1-est_probs1))*sqrt(est_probs2*(1-est_probs2))
par(mfrow = c(1,2))
image(1:6, 1:6, matrix(udprod, ncol = 6), asp = 1, las = 1, main = "UD prod")
image(1:6, 1:6, matrix(sdprod, ncol = 6), asp = 1, las = 1, main = "StDev prod")
```

We then calculate the cross-correlation between the location histories. The ccf function calculates these cross-correlations for all lags, positive and negative. These correlations are based on some contact distance. In the grid approach, we assume that the grid resolution accurately represents the epidemiological contact distance. This is, a maximum distance beyond which animals are not likely to transmit disease to one another. Most parasite environmental stages can be considered stationary with respect to their hosts movement, so this distance is entirely determined by the movement of the host.

The cross-correlation is unitless, but it is linked to a specific spatial resolution.

```{r xcorr}
xcors <- lapply(1:ncol(dethist1), \(i) ccf(dethist1[,i], dethist2[,i], plot = F, lag.max = 20-1)) 
xcors_vals <- sapply(xcors, "[[", "acf")
xcors_lags <- sapply(xcors, "[[", "lag")
```

Calculate the cell covariance: scale the correlation values by the decay rate and multiply by the sd product.

```{r cell_corr}
nu <- 1
corrint_ij <- colSums((xcors_vals*exp(-nu*abs(xcors_lags)))[1:20,])
corrint_ji <- colSums((xcors_vals*exp(-nu*abs(xcors_lags)))[20:39,])
corrint_ij <- replace(corrint_ij, is.nan(corrint_ij), 0)
corrint_ji <- replace(corrint_ji, is.nan(corrint_ji), 0)

# par(mfrow = c(1,2))
# image(matrix(corrint_ij, ncol = 6), las = 1, asp = 1, main = "Integral, i->j", col = hcl.colors(7, "Blue-Red", rev=T),
#       zlim = c(-max(abs(range(corrint_ij))),max(abs(range(corrint_ij)))))
# image(matrix(corrint_ji, ncol = 6), las = 1, asp = 1, main = "Integral, j->i", col = hcl.colors(7, "Blue-Red", rev = T),
#       zlim = c(-max(abs(range(corrint_ji))),max(abs(range(corrint_ji)))))
```

We then add the product of the UDs to the covariance term to obtain the FOI. For simplicity we assume $\beta=\lambda=1$.

```{r foi}
foi_ij <- udprod/nu+sdprod*corrint_ij
foi_ji <- udprod/nu+sdprod*corrint_ji

# par(mfrow = c(1,2))
# image(matrix((foi_ij-min(foi_ij))/diff(range(foi_ij)), ncol = 6), las = 1, asp = 1, main = "FOI, i->j")
# image(matrix((foi_ji-min(foi_ji))/diff(range(foi_ji)), ncol = 6), las = 1, asp = 1, main = "FOI, j->i")
```

Hare are the estimated force of infection values for $i$ from $j$, and *vice versa*.

```{r total foi}
print(sum(foi_ij[foi_ij>=0]))
print(sum(foi_ji[foi_ji>=0]))
```

Now we want to see what happens when we increase the scale, when we take larger grid cells to estimate use and correlation. First we define the new grid, each new cell will contain four of the smaller cells.

```{r}
ncells2 <- 9
cellind <- c(1,1,2,2,3,3,1,1,2,2,3,3,4,4,5,5,6,6,4,4,5,5,6,6,7,7,8,8,9,9,7,7,8,8,9,9)
pos1l <- cellind[pos1]
pos2l <- cellind[pos2]
dethist1l <- dethist2l <- matrix(0, nrow = nsteps, ncol = ncells2)
for (i in seq_len(nsteps)) {
  p1 <- pos1l[i]
  p2 <- pos2l[i]
  dethist1l[i,p1] <- 1
  dethist2l[i,p2] <- 1
}

est_probs1 <- est_probs2 <- rep(0,ncells2)
est_probs1[as.numeric(names(table(pos1l)))] <- table(pos1l)/nsteps
est_probs2[as.numeric(names(table(pos2l)))] <- table(pos2l)/nsteps

udprodl <- est_probs1*est_probs2
sdprodl <- sqrt(est_probs1*(1-est_probs1))*sqrt(est_probs2*(1-est_probs2))


par(mfrow = c(2,2))
image(1:3, 1:3, matrix(udprodl, ncol = 3), asp = 1, las = 1, main = "UD prod")
image(1:3, 1:3, matrix(sdprodl, ncol = 3), asp = 1, las = 1, main = "StDev prod")
image(1:6, 1:6, matrix(udprod, ncol = 6), asp = 1, las = 1, main = "UD prod")
image(1:6, 1:6, matrix(sdprod, ncol = 6), asp = 1, las = 1, main = "StDev prod")
```

```{r}
xcors <- lapply(1:ncol(dethist1l), \(i) ccf(dethist1l[,i], dethist2l[,i], plot = F, lag.max = 20-1)) 
xcors_vals <- sapply(xcors, "[[", "acf")
xcors_lags <- sapply(xcors, "[[", "lag")

nu <- 1
corrint_ijl <- colSums((xcors_vals*exp(-nu*abs(xcors_lags)))[1:20,])
corrint_jil <- colSums((xcors_vals*exp(-nu*abs(xcors_lags)))[20:39,])
corrint_ijl <- replace(corrint_ijl, is.nan(corrint_ijl), 0)
corrint_jil <- replace(corrint_jil, is.nan(corrint_jil), 0)

par(mfrow = c(2,2))
image(matrix(corrint_ijl, ncol = 3), las = 1, asp = 1, main = "Integral, i->j", col = hcl.colors(7, "Blue-Red", rev=T),
      zlim = c(-max(abs(range(corrint_ijl))),max(abs(range(corrint_ijl)))))
image(matrix(corrint_jil, ncol = 3), las = 1, asp = 1, main = "Integral, j->i", col = hcl.colors(7, "Blue-Red", rev = T),
      zlim = c(-max(abs(range(corrint_jil))),max(abs(range(corrint_jil)))))
image(matrix(corrint_ij, ncol = 6), las = 1, asp = 1, main = "Integral, i->j", col = hcl.colors(7, "Blue-Red", rev=T),
      zlim = c(-max(abs(range(corrint_ij))),max(abs(range(corrint_ij)))))
image(matrix(corrint_ji, ncol = 6), las = 1, asp = 1, main = "Integral, j->i", col = hcl.colors(7, "Blue-Red", rev = T),
      zlim = c(-max(abs(range(corrint_ji))),max(abs(range(corrint_ji)))))
```

```{r}

foi_ijl <- udprodl/nu+sdprodl*corrint_ijl
foi_jil <- udprodl/nu+sdprodl*corrint_jil

par(mfrow = c(2,2))
image(matrix(foi_ijl, ncol = 3), las = 1, asp = 1, main = "Large cell FOI, i->j", zlim = c(0,0.01))
image(matrix(foi_jil, ncol = 3), las = 1, asp = 1, main = "Large cell FOI, j->i", zlim = c(0,0.01))
image(matrix(foi_ij, ncol = 6), las = 1, asp = 1, main = "Small cell FOI, i->j")
image(matrix(foi_ji, ncol = 6), las = 1, asp = 1, main = "Small FOI, j->i")
```

```{r}
cat("Large cells FOI (i->j):",sum(foi_ijl[foi_ijl>=0]))
cat("\nLarge cells FOI (j->i):",sum(foi_jil[foi_jil>=0]))
cat("\nSmall cells FOI (i->j):",sum(foi_ij[foi_ij>=0]))
cat("\nSmall cells FOI (j->i):",sum(foi_ji[foi_ji>=0]))
```

The FOI estimated for the smaller cells is usually smaller than with the larger cells. With larger cells we are increasing the probability of encounter, as well as the covariance. These values, however, may not be representative of the epidemiological dynamics. The correct way of dealing with this, I think is to use a grid based on a contact distance that represents the host-parasite system accurately. We could use a larger grid, but then when we sample the probabilities of encounter they may be higher artificially.

For the simulated tracks, and for real data, we need to force a grid using the threshold distance for the kernel density estimation. This approach may generate very large objects in memory.

To help avoid this memory issue, we could calculate the correlation at a local scale, but take the probability values from a coarser--and therefore smaller--grid. So do we get similar values if we calculate the correlation at a small scale, and sample the probability values from the larger grid and scale them by the area?

```{r}
cat("FOI combination i->j", sum(udprodl[cellind]/4^2+sdprodl[cellind]/4^2*corrint_ij))
cat("\nFOI combination j->i", sum(udprodl[cellind]/4^2+sdprodl[cellind]/4^2*corrint_ji))
cat("\nSmall cells FOI (i->j):",sum(foi_ij[foi_ij>=0]))
cat("\nSmall cells FOI (j->i):",sum(foi_ji[foi_ji>=0]))
```

Here, I am taking the correlation values for the small cells, and sampling the probability estimated for the larger grid at each cell. The small cells within each larger cell would all have the probability value of the larger cell, divided by four. Thus the product of the UDs, and the product of the SDs, must be divided by 4\^2. In this case we obtain smaller total FOI estimates. This approach could lead to error, because it is essentially dividing the probability of encounter equally among cells, even though the encounters may be unlikely to occur in some of those cells.
